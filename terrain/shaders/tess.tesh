#version 410
layout(triangles, equal_spacing, ccw) in;

in vec3 tcPosition[];
in vec2 eTex[];
in float eOffset[];
out vec3 tePosition;
out vec3 tePatchDistance;
out vec2 gTex;
out vec3 teNormal;

out vec3 depth;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform sampler2D noiseTexture;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 getNormal(vec2 uv) {
	vec2 size = vec2(1.0,0.0);
	vec2 texelSize = 1.0 / textureSize(noiseTexture, 0);
	
	//vec3 off = vec3(-1, 0, 1);
	
	float p0 = texture(noiseTexture, vec2(uv.x, uv.y+texelSize.y)).x;
	float p1 = texture(noiseTexture, vec2(uv.x, uv.y-texelSize.y)).x;
	float p2 = texture(noiseTexture, vec2(uv.x+texelSize.x, uv.y)).x;
	float p3 = texture(noiseTexture, vec2(uv.x-texelSize.x, uv.y)).x;
	
	//float p0 = textureOffset(noiseTexture, uv, off.xy).x;
	//float p1 = textureOffset(noiseTexture, uv, off.zy).x;
	//float p2 = textureOffset(noiseTexture, uv, off.yx).x;
	//float p3 = textureOffset(noiseTexture, uv, off.yz).x;
	//return vec3(p1-p0);
	
	return cross(normalize(vec3(size.xy, p1-p0)), normalize(vec3(size.yx, p3-p2)));
}

void main()
{
	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];
	vec3 teNormal = normalize(cross(vec3(p1-p0), vec3(p2-p1)));
	
	tePosition = p0 + p1 + p2;
	vec2 longlat = vec2((atan(tePosition.x, tePosition.y) / 3.1415926 + 1.0) * 0.5,
                        (asin(tePosition.z) / 3.1415926 + 0.5));
	vec3 noiseOffset = vec3(texture(noiseTexture, longlat))/20.0;
	vec3 n = getNormal(longlat);
	tePatchDistance = gl_TessCoord;
	tePosition = vec3(tePosition.x+noiseOffset.x, tePosition.y+noiseOffset.y, tePosition.z+noiseOffset.z);
	gTex = eTex[0];
	
	//gl_Position = vec4(tePosition.x+noiseOffset.x, tePosition.y+noiseOffset.y, tePosition.z, 1.0)*model*view*projection;
	gl_Position = vec4(tePosition, 1.0)*model*view*projection;
	depth = n;//teNormal.xyz;
}